<div class="trip-form-page">
  <div class="page-header">
    <div class="container">
      <h1 class="page-title">Create New Trip</h1>
      <p class="page-description">Plan your perfect itinerary step by step</p>
    </div>
  </div>
  
  <div class="container">
    <div class="trip-form-container">
      <div class="form-nav">
        <ul class="form-nav-tabs">
          <li class="form-nav-tab active" data-tab="basic-info">
            <span class="tab-number">1</span>
            <span class="tab-text">Basic Info</span>
          </li>
          <li class="form-nav-tab" data-tab="itinerary">
            <span class="tab-number">2</span>
            <span class="tab-text">Itinerary</span>
          </li>
          <li class="form-nav-tab" data-tab="details">
            <span class="tab-number">3</span>
            <span class="tab-text">Details</span>
          </li>
          <li class="form-nav-tab" data-tab="review">
            <span class="tab-number">4</span>
            <span class="tab-text">Review</span>
          </li>
        </ul>
      </div>
      
      <form id="createTripForm" class="trip-form" method="POST" action="/api/trips" enctype="multipart/form-data">
        <!-- Basic Info Tab -->
        <div class="form-tab active" id="basic-info-tab">
          <div class="form-section">
            <h2 class="form-section-title">Trip Details</h2>
            
            <div class="form-group">
              <label for="title">Trip Title <span class="required">*</span></label>
              <input type="text" id="title" name="title" required placeholder="E.g., Weekend in Paris, Japan Adventure, etc.">
            </div>
            
            <div class="form-row">
              <div class="form-group">
                <label for="country">Country <span class="required">*</span></label>
                <select id="country" name="location[country]" required>
                  <option value="">Select a country</option>
                  <!-- This would be populated with countries via JavaScript -->
                </select>
              </div>
              
              <div class="form-group">
                <label for="city">City</label>
                <input type="text" id="city" name="location[city]" placeholder="Primary city (optional)">
              </div>
            </div>
            
            <div class="form-row">
              <div class="form-group">
                <label for="startDate">Start Date <span class="required">*</span></label>
                <input type="date" id="startDate" name="startDate" required>
              </div>
              
              <div class="form-group">
                <label for="endDate">End Date <span class="required">*</span></label>
                <input type="date" id="endDate" name="endDate" required>
              </div>
            </div>
            
            <div class="form-group">
              <label for="description">Trip Description <span class="required">*</span></label>
              <textarea id="description" name="description" rows="5" required placeholder="Describe your trip, its highlights, and what makes it special..."></textarea>
              <div class="char-counter">0/1000 characters</div>
            </div>
            
            <div class="form-group">
              <label>Trip Visibility</label>
              <div class="form-check-group">
                <label class="form-check">
                  <input type="radio" name="isPublic" value="true" checked>
                  <span class="radio-label">Public</span>
                  <span class="hint">Anyone can view this trip</span>
                </label>
                <label class="form-check">
                  <input type="radio" name="isPublic" value="false">
                  <span class="radio-label">Private</span>
                  <span class="hint">Only you can view this trip</span>
                </label>
              </div>
            </div>
          </div>
          
          <div class="form-section">
            <h2 class="form-section-title">Cover Image</h2>
            
            <div class="form-group">
              <label for="coverImage">Upload Cover Image</label>
              <div class="image-upload-container">
                <div class="image-upload-preview">
                  <img src="/images/placeholder-image.jpg" alt="Cover Image Preview" id="coverImagePreview">
                </div>
                <div class="image-upload-controls">
                  <input type="file" id="coverImage" name="coverImage" accept="image/*" class="image-upload-input">
                  <label for="coverImage" class="image-upload-label">
                    <i class="fas fa-cloud-upload-alt"></i>
                    <span>Choose an image</span>
                  </label>
                  <p class="image-hint">Recommended size: 1200Ã—800 pixels. Max 5MB.</p>
                </div>
              </div>
            </div>
          </div>
          
          <div class="form-section">
            <h2 class="form-section-title">Tags</h2>
            
            <div class="form-group">
              <label for="tags">Trip Tags</label>
              <input type="text" id="tags" name="tags" placeholder="E.g., beach, family, adventure (comma separated)">
              <p class="hint">Add tags to help others find your trip. Separate with commas.</p>
            </div>
            
            <div class="popular-tags">
              <span class="tag-suggestion" data-tag="adventure">adventure</span>
              <span class="tag-suggestion" data-tag="family">family</span>
              <span class="tag-suggestion" data-tag="budget">budget</span>
              <span class="tag-suggestion" data-tag="luxury">luxury</span>
              <span class="tag-suggestion" data-tag="weekend">weekend</span>
              <span class="tag-suggestion" data-tag="food">food</span>
              <span class="tag-suggestion" data-tag="cultural">cultural</span>
              <span class="tag-suggestion" data-tag="beach">beach</span>
              <span class="tag-suggestion" data-tag="winter">winter</span>
              <span class="tag-suggestion" data-tag="summer">summer</span>
            </div>
          </div>
          
          <div class="form-actions">
            <button type="button" class="btn btn-primary btn-next">Next: Itinerary</button>
          </div>
        </div>
        
        <!-- Itinerary Tab -->
        <div class="form-tab" id="itinerary-tab">
          <div class="form-section">
            <h2 class="form-section-title">Day-by-Day Planning</h2>
            <p class="form-section-description">Create your trip schedule by adding activities for each day.</p>
            
            <div id="daysContainer" class="days-container">
              <!-- Day cards will be created dynamically based on trip duration -->
              <div class="empty-message">
                <p>Your itinerary days will appear here once you set your trip dates.</p>
              </div>
            </div>
          </div>
          
          <div class="form-actions">
            <button type="button" class="btn btn-outline btn-prev">Previous</button>
            <button type="button" class="btn btn-primary btn-next">Next: Details</button>
          </div>
        </div>
        
        <!-- Details Tab -->
        <div class="form-tab" id="details-tab">
          <div class="form-section">
            <h2 class="form-section-title">Budget</h2>
            
            <div class="form-row">
              <div class="form-group">
                <label for="budgetAmount">Estimated Budget</label>
                <input type="number" id="budgetAmount" name="budget[amount]" placeholder="0.00" min="0" step="0.01">
              </div>
              
              <div class="form-group">
                <label for="budgetCurrency">Currency</label>
                <select id="budgetCurrency" name="budget[currency]">
                  <option value="USD">USD - US Dollar</option>
                  <option value="EUR">EUR - Euro</option>
                  <option value="GBP">GBP - British Pound</option>
                  <option value="JPY">JPY - Japanese Yen</option>
                  <option value="THB">THB - Thai Baht</option>
                  <!-- Add more currencies as needed -->
                </select>
              </div>
            </div>
          </div>
          
          <div class="form-section" id="mapSection">
            <h2 class="form-section-title">Trip Map</h2>
            <p class="form-section-description">Visualize your itinerary on a map. Markers will be placed based on your activities' locations.</p>
            
            <div id="tripFormMap" class="trip-form-map"></div>
          </div>
          
          <div class="form-actions">
            <button type="button" class="btn btn-outline btn-prev">Previous</button>
            <button type="button" class="btn btn-primary btn-next">Next: Review</button>
          </div>
        </div>
        
        <!-- Review Tab -->
        <div class="form-tab" id="review-tab">
          <div class="form-section">
            <h2 class="form-section-title">Review Your Trip</h2>
            <p class="form-section-description">Please review all your trip details before submission.</p>
            
            <div class="trip-review-summary">
              <div class="review-section">
                <h3>Basic Information</h3>
                <div class="review-item">
                  <span class="review-label">Trip Title:</span>
                  <span class="review-value" id="reviewTitle"></span>
                </div>
                <div class="review-item">
                  <span class="review-label">Destination:</span>
                  <span class="review-value" id="reviewDestination"></span>
                </div>
                <div class="review-item">
                  <span class="review-label">Dates:</span>
                  <span class="review-value" id="reviewDates"></span>
                </div>
                <div class="review-item">
                  <span class="review-label">Visibility:</span>
                  <span class="review-value" id="reviewVisibility"></span>
                </div>
              </div>
              
              <div class="review-section">
                <h3>Itinerary Summary</h3>
                <div class="review-item">
                  <span class="review-label">Duration:</span>
                  <span class="review-value" id="reviewDuration"></span>
                </div>
                <div class="review-item">
                  <span class="review-label">Total Activities:</span>
                  <span class="review-value" id="reviewActivities"></span>
                </div>
              </div>
              
              <div class="review-section">
                <h3>Budget</h3>
                <div class="review-item">
                  <span class="review-label">Estimated Budget:</span>
                  <span class="review-value" id="reviewBudget"></span>
                </div>
              </div>
            </div>
          </div>
          
          <div class="form-actions">
            <button type="button" class="btn btn-outline btn-prev">Previous</button>
            <button type="submit" class="btn btn-primary">Create Trip</button>
          </div>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Activity Modal Template -->
<div id="activityModal" class="modal">
  <div class="modal-content">
    <div class="modal-header">
      <h2 class="modal-title">Add Activity</h2>
      <button type="button" class="modal-close">&times;</button>
    </div>
    
    <div class="modal-body">
      <form id="activityForm">
        <input type="hidden" id="activityDayIndex" name="dayIndex">
        <input type="hidden" id="activityIndex" name="activityIndex">
        
        <div class="form-group">
          <label for="activityTitle">Activity Title <span class="required">*</span></label>
          <input type="text" id="activityTitle" name="title" required placeholder="E.g., Visit Eiffel Tower, Dinner at Restaurant...">
        </div>
        
        <div class="form-row">
          <div class="form-group">
            <label for="activityType">Type</label>
            <select id="activityType" name="type">
              <option value="attraction">Attraction</option>
              <option value="accommodation">Accommodation</option>
              <option value="transportation">Transportation</option>
              <option value="food">Food</option>
              <option value="other">Other</option>
            </select>
          </div>
          
          <div class="form-group">
            <label for="activityLocation">Location</label>
            <input type="text" id="activityLocation" name="location[address]" placeholder="Search for a place...">
            <input type="hidden" id="activityLat" name="location[coordinates][coordinates][1]">
            <input type="hidden" id="activityLng" name="location[coordinates][coordinates][0]">
          </div>
        </div>
        
        <div class="form-row">
          <div class="form-group">
            <label for="activityStartTime">Start Time</label>
            <input type="time" id="activityStartTime" name="startTime">
          </div>
          
          <div class="form-group">
            <label for="activityEndTime">End Time</label>
            <input type="time" id="activityEndTime" name="endTime">
          </div>
        </div>
        
        <div class="form-group">
          <label for="activityDescription">Description</label>
          <textarea id="activityDescription" name="description" rows="3" placeholder="Describe this activity..."></textarea>
        </div>
        
        <div class="form-row">
          <div class="form-group">
            <label for="activityPrice">Price</label>
            <input type="number" id="activityPrice" name="price[amount]" placeholder="0.00" min="0" step="0.01">
          </div>
          
          <div class="form-group">
            <label for="activityCurrency">Currency</label>
            <select id="activityCurrency" name="price[currency]">
              <option value="USD">USD</option>
              <option value="EUR">EUR</option>
              <option value="GBP">GBP</option>
              <option value="JPY">JPY</option>
              <option value="THB">THB</option>
              <!-- Add more currencies as needed -->
            </select>
          </div>
        </div>
        
        <div class="form-group">
          <label for="activityPhoto">Photo</label>
          <input type="file" id="activityPhoto" name="photo" accept="image/*">
        </div>
        
        <div class="form-group">
          <label for="activityNotes">Notes</label>
          <textarea id="activityNotes" name="notes" rows="2" placeholder="Any additional notes..."></textarea>
        </div>
      </form>
    </div>
    
    <div class="modal-footer">
      <button type="button" class="btn btn-outline modal-cancel">Cancel</button>
      <button type="button" class="btn btn-primary modal-save">Save Activity</button>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Form navigation
    const formTabs = document.querySelectorAll('.form-nav-tab');
    const formSections = document.querySelectorAll('.form-tab');
    const nextButtons = document.querySelectorAll('.btn-next');
    const prevButtons = document.querySelectorAll('.btn-prev');
    
    // Switch tabs
    formTabs.forEach(tab => {
      tab.addEventListener('click', function() {
        const tabId = this.getAttribute('data-tab');
        
        // Update active tab
        formTabs.forEach(t => t.classList.remove('active'));
        this.classList.add('active');
        
        // Show active section
        formSections.forEach(section => {
          section.classList.remove('active');
          if (section.id === `${tabId}-tab`) {
            section.classList.add('active');
          }
        });
      });
    });
    
    // Next button
    nextButtons.forEach(button => {
      button.addEventListener('click', function() {
        const activeTab = document.querySelector('.form-nav-tab.active');
        const nextTab = activeTab.nextElementSibling;
        
        if (nextTab) {
          nextTab.click();
        }
      });
    });
    
    // Previous button
    prevButtons.forEach(button => {
      button.addEventListener('click', function() {
        const activeTab = document.querySelector('.form-nav-tab.active');
        const prevTab = activeTab.previousElementSibling;
        
        if (prevTab) {
          prevTab.click();
        }
      });
    });
    
    // Date validation and day generation
    const startDateInput = document.getElementById('startDate');
    const endDateInput = document.getElementById('endDate');
    const daysContainer = document.getElementById('daysContainer');
    
    function updateDays() {
      if (!startDateInput.value || !endDateInput.value) return;
      
      const startDate = new Date(startDateInput.value);
      const endDate = new Date(endDateInput.value);
      
      // Validate dates
      if (endDate < startDate) {
        endDateInput.setCustomValidity('End date must be after or equal to start date');
        return;
      } else {
        endDateInput.setCustomValidity('');
      }
      
      // Clear days container
      daysContainer.innerHTML = '';
      
      // Calculate duration
      const duration = Math.floor((endDate - startDate) / (24 * 60 * 60 * 1000)) + 1;
      
      // Generate day cards
      for (let i = 0; i < duration; i++) {
        const currentDate = new Date(startDate);
        currentDate.setDate(startDate.getDate() + i);
        
        const dayCard = document.createElement('div');
        dayCard.className = 'day-card';
        dayCard.innerHTML = `
          <div class="day-header">
            <h3 class="day-title">Day ${i + 1}</h3>
            <span class="day-date">${currentDate.toLocaleDateString('en-US', { weekday: 'long', month: 'short', day: 'numeric' })}</span>
            <input type="hidden" name="days[${i}][date]" value="${currentDate.toISOString().split('T')[0]}">
          </div>
          
          <div class="day-activities" id="day-activities-${i}">
            <div class="empty-message">
              <p>No activities yet. Click "Add Activity" to begin planning this day.</p>
            </div>
          </div>
          
          <div class="day-actions">
            <button type="button" class="btn btn-sm btn-outline add-activity" data-day="${i}">
              <i class="fas fa-plus"></i> Add Activity
            </button>
          </div>
        `;
        
        daysContainer.appendChild(dayCard);
      }
      
      // Initialize add activity buttons
      initActivityButtons();
    }
    
    startDateInput.addEventListener('change', updateDays);
    endDateInput.addEventListener('change', updateDays);
    
    // Activity modal handling
    const activityModal = document.getElementById('activityModal');
    const activityForm = document.getElementById('activityForm');
    const modalClose = document.querySelector('.modal-close');
    const modalCancel = document.querySelector('.modal-cancel');
    const modalSave = document.querySelector('.modal-save');
    const activityDayIndex = document.getElementById('activityDayIndex');
    const activityIndex = document.getElementById('activityIndex');
    
    function initActivityButtons() {
      const addActivityButtons = document.querySelectorAll('.add-activity');
      
      addActivityButtons.forEach(button => {
        button.addEventListener('click', function() {
          const dayIndex = this.getAttribute('data-day');
          openActivityModal(dayIndex);
        });
      });
    }
    
    function openActivityModal(dayIndex, index = null) {
      activityDayIndex.value = dayIndex;
      activityIndex.value = index;
      
      // Clear form
      activityForm.reset();
      
      // If editing, populate form
      if (index !== null) {
        // Populate form fields with existing activity data
        // This would need to be implemented based on your data structure
      }
      
      // Show modal
      activityModal.style.display = 'block';
    }
    
    function closeActivityModal() {
      activityModal.style.display = 'none';
    }
    
    modalClose.addEventListener('click', closeActivityModal);
    modalCancel.addEventListener('click', closeActivityModal);
    
    modalSave.addEventListener('click', function() {
      // Get form data
      const dayIndex = activityDayIndex.value;
      const index = activityIndex.value;
      const title = document.getElementById('activityTitle').value;
      const type = document.getElementById('activityType').value;
      const location = document.getElementById('activityLocation').value;
      const startTime = document.getElementById('activityStartTime').value;
      const endTime = document.getElementById('activityEndTime').value;
      const description = document.getElementById('activityDescription').value;
      
      if (!title) {
        alert('Activity title is required.');
        return;
      }
      
      // Create or update activity
      const dayActivities = document.getElementById(`day-activities-${dayIndex}`);
      
      // Remove empty message if present
      const emptyMessage = dayActivities.querySelector('.empty-message');
      if (emptyMessage) {
        emptyMessage.remove();
      }
      
      // Create new activity card
      const activityCard = document.createElement('div');
      activityCard.className = 'activity-card';
      
      // Generate activity HTML
      activityCard.innerHTML = `
        <div class="activity-header">
          <div class="activity-icon">
            <i class="fas ${getActivityIcon(type)}"></i>
          </div>
          <div class="activity-summary">
            <h4 class="activity-title">${title}</h4>
            <div class="activity-meta">
              ${startTime ? `<span class="activity-time">${startTime}${endTime ? ` - ${endTime}` : ''}</span>` : ''}
              ${location ? `<span class="activity-location"><i class="fas fa-map-marker-alt"></i> ${location}</span>` : ''}
            </div>
          </div>
          <div class="activity-actions">
            <button type="button" class="activity-action edit-activity" data-day="${dayIndex}" data-index="${index || dayActivities.children.length}">
              <i class="fas fa-edit"></i>
            </button>
            <button type="button" class="activity-action delete-activity" data-day="${dayIndex}" data-index="${index || dayActivities.children.length}">
              <i class="fas fa-trash-alt"></i>
            </button>
          </div>
        </div>
        ${description ? `<div class="activity-description">${description}</div>` : ''}
        
        <!-- Hidden inputs to store activity data -->
        <input type="hidden" name="days[${dayIndex}][activities][${index || dayActivities.children.length}][title]" value="${title}">
        <input type="hidden" name="days[${dayIndex}][activities][${index || dayActivities.children.length}][type]" value="${type}">
        ${location ? `<input type="hidden" name="days[${dayIndex}][activities][${index || dayActivities.children.length}][location][address]" value="${location}">` : ''}
        ${startTime ? `<input type="hidden" name="days[${dayIndex}][activities][${index || dayActivities.children.length}][startTime]" value="${startTime}">` : ''}
        ${endTime ? `<input type="hidden" name="days[${dayIndex}][activities][${index || dayActivities.children.length}][endTime]" value="${endTime}">` : ''}
        ${description ? `<input type="hidden" name="days[${dayIndex}][activities][${index || dayActivities.children.length}][description]" value="${description}">` : ''}
      `;
      
      // Add or replace activity card
      if (index !== null) {
        const oldCard = dayActivities.children[index];
        if (oldCard) {
          dayActivities.replaceChild(activityCard, oldCard);
        } else {
          dayActivities.appendChild(activityCard);
        }
      } else {
        dayActivities.appendChild(activityCard);
      }
      
      // Initialize edit and delete buttons
      initActivityCardButtons();
      
      // Close modal
      closeActivityModal();
    });
    
    function initActivityCardButtons() {
      const editButtons = document.querySelectorAll('.edit-activity');
      const deleteButtons = document.querySelectorAll('.delete-activity');
      
      editButtons.forEach(button => {
        button.addEventListener('click', function() {
          const dayIndex = this.getAttribute('data-day');
          const index = this.getAttribute('data-index');
          openActivityModal(dayIndex, index);
        });
      });
      
      deleteButtons.forEach(button => {
        button.addEventListener('click', function() {
          if (confirm('Are you sure you want to delete this activity?')) {
            const dayIndex = this.getAttribute('data-day');
            const index = this.getAttribute('data-index');
            const dayActivities = document.getElementById(`day-activities-${dayIndex}`);
            
            // Remove activity card
            dayActivities.removeChild(dayActivities.children[index]);
            
            // Re-index remaining activities
            const remainingActivities = dayActivities.querySelectorAll('.activity-card');
            if (remainingActivities.length === 0) {
              // Add empty message if no activities left
              dayActivities.innerHTML = `
                <div class="empty-message">
                  <p>No activities yet. Click "Add Activity" to begin planning this day.</p>
                </div>
              `;
            } else {
              // Update data-index attributes and hidden input names
              remainingActivities.forEach((card, i) => {
                const editBtn = card.querySelector('.edit-activity');
                const deleteBtn = card.querySelector('.delete-activity');
                const inputs = card.querySelectorAll('input[type="hidden"]');
                
                if (editBtn) editBtn.setAttribute('data-index', i);
                if (deleteBtn) deleteBtn.setAttribute('data-index', i);
                
                inputs.forEach(input => {
                  const name = input.getAttribute('name');
                  const newName = name.replace(/\[\d+\]/, `[${i}]`);
                  input.setAttribute('name', newName);
                });
              });
            }
          }
        });
      });
    }
    
    function getActivityIcon(type) {
      switch (type) {
        case 'attraction': return 'fa-camera';
        case 'accommodation': return 'fa-hotel';
        case 'transportation': return 'fa-car';
        case 'food': return 'fa-utensils';
        default: return 'fa-map-pin';
      }
    }
    
    // Populate country dropdown
    const countrySelect = document.getElementById('country');
    const countries = [
      "Afghanistan", "Albania", "Algeria", "Andorra", "Angola", "Antigua and Barbuda", "Argentina", "Armenia", "Australia", 
      "Austria", "Azerbaijan", "Bahamas", "Bahrain", "Bangladesh", "Barbados", "Belarus", "Belgium", "Belize", "Benin", 
      "Bhutan", "Bolivia", "Bosnia and Herzegovina", "Botswana", "Brazil", "Brunei", "Bulgaria", "Burkina Faso", "Burundi", 
      "Cabo Verde", "Cambodia", "Cameroon", "Canada", "Central African Republic", "Chad", "Chile", "China", "Colombia", 
      "Comoros", "Congo", "Costa Rica", "Croatia", "Cuba", "Cyprus", "Czech Republic", "Denmark", "Djibouti", "Dominica", 
      "Dominican Republic", "Ecuador", "Egypt", "El Salvador", "Equatorial Guinea", "Eritrea", "Estonia", "Eswatini", 
      "Ethiopia", "Fiji", "Finland", "France", "Gabon", "Gambia", "Georgia", "Germany", "Ghana", "Greece", "Grenada", 
      "Guatemala", "Guinea", "Guinea-Bissau", "Guyana", "Haiti", "Honduras", "Hungary", "Iceland", "India", "Indonesia", 
      "Iran", "Iraq", "Ireland", "Israel", "Italy", "Jamaica", "Japan", "Jordan", "Kazakhstan", "Kenya", "Kiribati", 
      "Korea, North", "Korea, South", "Kosovo", "Kuwait", "Kyrgyzstan", "Laos", "Latvia", "Lebanon", "Lesotho", "Liberia", 
      "Libya", "Liechtenstein", "Lithuania", "Luxembourg", "Madagascar", "Malawi", "Malaysia", "Maldives", "Mali", "Malta", 
      "Marshall Islands", "Mauritania", "Mauritius", "Mexico", "Micronesia", "Moldova", "Monaco", "Mongolia", "Montenegro", 
      "Morocco", "Mozambique", "Myanmar", "Namibia", "Nauru", "Nepal", "Netherlands", "New Zealand", "Nicaragua", "Niger", 
      "Nigeria", "North Macedonia", "Norway", "Oman", "Pakistan", "Palau", "Palestine", "Panama", "Papua New Guinea", 
      "Paraguay", "Peru", "Philippines", "Poland", "Portugal", "Qatar", "Romania", "Russia", "Rwanda", "Saint Kitts and Nevis", 
      "Saint Lucia", "Saint Vincent and the Grenadines", "Samoa", "San Marino", "Sao Tome and Principe", "Saudi Arabia", 
      "Senegal", "Serbia", "Seychelles", "Sierra Leone", "Singapore", "Slovakia", "Slovenia", "Solomon Islands", "Somalia", 
      "South Africa", "South Sudan", "Spain", "Sri Lanka", "Sudan", "Suriname", "Sweden", "Switzerland", "Syria", "Taiwan", 
      "Tajikistan", "Tanzania", "Thailand", "Timor-Leste", "Togo", "Tonga", "Trinidad and Tobago", "Tunisia", "Turkey", 
      "Turkmenistan", "Tuvalu", "Uganda", "Ukraine", "United Arab Emirates", "United Kingdom", "United States", "Uruguay", 
      "Uzbekistan", "Vanuatu", "Vatican City", "Venezuela", "Vietnam", "Yemen", "Zambia", "Zimbabwe"
    ];
    
    countries.forEach(country => {
      const option = document.createElement('option');
      option.value = country;
      option.textContent = country;
      countrySelect.appendChild(option);
    });
    
    // Handle tag suggestions
    const tagsInput = document.getElementById('tags');
    const tagSuggestions = document.querySelectorAll('.tag-suggestion');
    
    tagSuggestions.forEach(tag => {
      tag.addEventListener('click', function() {
        const tagName = this.getAttribute('data-tag');
        const currentTags = tagsInput.value.split(',').map(t => t.trim()).filter(t => t);
        
        if (!currentTags.includes(tagName)) {
          if (currentTags.length > 0) {
            tagsInput.value = `${tagsInput.value}, ${tagName}`;
          } else {
            tagsInput.value = tagName;
          }
        }
      });
    });
    
    // Character counter for description
    const descriptionTextarea = document.getElementById('description');
    const charCounter = document.querySelector('.char-counter');
    
    descriptionTextarea.addEventListener('input', function() {
      const count = this.value.length;
      charCounter.textContent = `${count}/1000 characters`;
      
      if (count > 1000) {
        charCounter.classList.add('error');
      } else {
        charCounter.classList.remove('error');
      }
    });
    
    // Preview cover image
    const coverImageInput = document.getElementById('coverImage');
    const coverImagePreview = document.getElementById('coverImagePreview');
    
    coverImageInput.addEventListener('change', function() {
      if (this.files && this.files[0]) {
        const reader = new google.maps.place();
        
        reader.onload = function(e) {
          coverImagePreview.src = e.target.result;
        };
        
        reader.readAsDataURL(this.files[0]);
      }
    });
    
    // Form submission and review
    const createTripForm = document.getElementById('createTripForm');
    
    createTripForm.addEventListener('submit', function(e) {
      e.preventDefault();
      
      // Validate form
      if (!this.checkValidity()) {
        this.reportValidity();
        return;
      }
      
      // Submit form
      this.submit();
    });
    
    // Update review tab
    const reviewTab = document.querySelector('[data-tab="review"]');
    
    reviewTab.addEventListener('click', function() {
      // Update review summary
      document.getElementById('reviewTitle').textContent = document.getElementById('title').value || 'Not specified';
      
      const country = document.getElementById('country').value;
      const city = document.getElementById('city').value;
      document.getElementById('reviewDestination').textContent = city ? `${city}, ${country}` : country;
      
      const startDate = new Date(document.getElementById('startDate').value);
      const endDate = new Date(document.getElementById('endDate').value);
      document.getElementById('reviewDates').textContent = `${startDate.toLocaleDateString()} - ${endDate.toLocaleDateString()}`;
      
      const isPublic = document.querySelector('input[name="isPublic"]:checked').value === 'true';
      document.getElementById('reviewVisibility').textContent = isPublic ? 'Public' : 'Private';
      
      const duration = Math.floor((endDate - startDate) / (24 * 60 * 60 * 1000)) + 1;
      document.getElementById('reviewDuration').textContent = `${duration} days`;
      
      const activityCount = document.querySelectorAll('.activity-card').length;
      document.getElementById('reviewActivities').textContent = activityCount;
      
      const budgetAmount = document.getElementById('budgetAmount').value;
      const budgetCurrency = document.getElementById('budgetCurrency').value;
      document.getElementById('reviewBudget').textContent = budgetAmount ? `${budgetAmount} ${budgetCurrency}` : 'Not specified';
    });
    
    // Initialize Google Maps for activity locations
    function initializeGooglePlaces() {
      if (typeof google === 'undefined' || typeof google.maps === 'undefined') return;
      
      const activityLocationInput = document.getElementById('activityLocation');
      const activityLatInput = document.getElementById('activityLat');
      const activityLngInput = document.getElementById('activityLng');
      
      const autocomplete = new google.maps.places.Autocomplete(activityLocationInput);
      
      autocomplete.addListener('place_changed', function() {
        const place = autocomplete.getPlace();
        
        if (!place.geometry) return;
        
        activityLatInput.value = place.geometry.location.lat();
        activityLngInput.value = place.geometry.location.lng();
      });
    }
    
    // Initialize map in details tab
    function initializeTripMap() {
      if (typeof google === 'undefined' || typeof google.maps === 'undefined') return;
      
      const mapContainer = document.getElementById('tripFormMap');
      
      if (!mapContainer) return;
      
      const map = new google.maps.Map(mapContainer, {
        center: { lat: 0, lng: 0 },
        zoom: 2,
        mapTypeControl: true,
        fullscreenControl: true,
        streetViewControl: false
      });
      
      // This would be enhanced to show markers for all activities with coordinates
    }
    
    // Initialize maps when Google Maps API is loaded
    if (typeof google !== 'undefined' && typeof google.maps !== 'undefined') {
      initializeGooglePlaces();
      initializeTripMap();
    } else {
      window.addEventListener('load', function() {
        if (typeof google !== 'undefined' && typeof google.maps !== 'undefined') {
          initializeGooglePlaces();
          initializeTripMap();
        }
      });
    }
  });
</script>
